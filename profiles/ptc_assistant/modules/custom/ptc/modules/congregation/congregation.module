<?php

function congregation_entity_info() {
	$return = array();
	$return['congregation'] = array(
		'label'            => t('Congregation'),
		'controller class' => 'CongregationController',
		'base table'       => 'congregation',
		'uri callback'     => 'congregation_uri',
		'fieldable'        => FALSE,
		'entity keys'      => array(
			'id'     => 'cid',
			'bundle' => 'congregation',
			'label'  => 'congregation',
		),
		'bundle keys' => array(
			'bundle' => 'congregation',
		),
		'static cache' => TRUE,
		'bundles'      => array('label' => 'congregation',),
		'view modes'   => array(
			'full' => array(
				'label' => t('Full content'),
				'custom settings' => FALSE,
			),
			'teaser' => array(
				'label' => t('Teaser'),
				'custom settings' => FALSE,
			),
		),
	);

	return $return;
}

function congregation_uri($cid) {
	return array(
		'path' => 'congregation/' . $congregation->cid,
	);
}

function congregation_menu() {
	$items = array();
	
	$items['setup/congregations'] = array(
		'title'            => 'Congregations',
		'description'      => 'Congregation/Kingdom Hall Options',
		'page callback'    => 'system_admin_menu_block_page',
		'access callback'  => 'kingdom_hall_access',
		'access arguments' => array('view', 1),
		'file'             => 'system.admin.inc',
		'file path'        => drupal_get_path('module', 'system'),
	);
	$items['setup/congregations/congregation'] = array(
		'title'            => 'Congregations',
		'description'      => 'Edit congregations',
    'page callback'    => 'congregation_congregations',
		'access callback'  => 'congregation_access',
		'access arguments' => array('view', 1),
		'file'             => 'congregation.pages.inc',
	);
	$items['setup/congregations/congregation/add'] = array(
		'title'            => 'Add new congregation',
		'page callback'    => 'congregation_add',
		'access arguments' => array('add congregation'),
		'weight'           => 1,
		'file'             => 'congregation.pages.inc',
		'type'             => MENU_LOCAL_ACTION,
	);

	$items['congregation/%congregation'] = array(
		'title'            => 'Congregation',
		'page callback'    => 'congregation_page_view',
		'page arguments'   => array(1),
		'access callback'  => 'congregation_access',
		'access arguments' => array('view', 1),
		'file'             => 'congregation.pages.inc',
		'type'             => MENU_CALLBACK,
		'weight'           => 0,
	);
	/*$items['congregation/%congregation/view'] = array(
		'title'  => 'View',
		'type'   => MENU_DEFAULT_LOCAL_TASK,
		'weight' => -10,
	);*/
	$items['congregation/%congregation/edit'] = array(
		'title'            => 'Edit',
		'page callback'    => 'congregation_page_edit',
		'page arguments'   => array(1),
		'access callback'  => 'congregation_access',
		'access arguments' => array('edit', 1),
		'weight'           => 0,
		'file'             => 'congregation.pages.inc',
		'type'             => MENU_LOCAL_TASK,
		'context'          => MENU_CONTEXT_PAGE|MENU_CONTEXT_INLINE,
	);
	$items['congregation/%congregation/delete'] = array(
		'title'            => 'Delete',
		'page callback'    => 'drupal_get_form',
		'page arguments'   => array('congregation_delete_confirm', 1),
		'access callback'  => 'congregation_access',
		'access arguments' => array('delete', 1),
		'weight'           => 1,
		'file'             => 'congregation.pages.inc',
		'type'             => MENU_LOCAL_TASK,
		'context'          => MENU_CONTEXT_INLINE,
	);
	
	return $items;
}

function congregation_load($cid = NULL, $reset = FALSE) {
	$cid = isset($cid) ? array($cid) : array();
	$conditions = array();
	$cids = congregation_load_multiple($cid, $conditions, $reset);
	return $cids ? reset($cids) :FALSE;
}

function congregation_load_multiple($cids = array(), $conditions = array(), $reset = FALSE) {
	return entity_load('congregation', $cids, $conditions, $reset);
}

function congregation_access($op, $congregation) {
	global $user;
	
	if ($op == 'view' || $op == 'create' || $op == 'edit' || $op == 'update' || $op == 'delete') {
    $access = user_access('administer talks', $user);
  }
	else {
	  $access = FALSE;
	}
	
	return $access;
}

/**
 * Implements hook_block_info().
 */
function congregation_block_info() {
	$blocks = array();
	
  $blocks['congregation_settings'] = array(
    'info' => t('Congregation settings'),
		'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
  );
	
  return $blocks;
}

/**
 * Implements hook_block_info_alter().
 */
function congregation_block_info_alter(&$blocks, $theme, $code_blocks) {
	//dsm($blocks, 'blocks');
	if (isset($blocks['congregation']['congregation_settings'])) {
		if ($blocks['congregation']['congregation_settings']['theme'] == 'bartik') {
			$blocks['congregation']['congregation_settings']['region'] = 'sidebar_second';
		}
	}
	//dsm($blocks, 'blocks after alter');
}

/**
 * Implements hook_block_view().
 */
function congregation_block_view($delta = '') {
	$block = array();
	
	switch ($delta) {
    case 'congregation_settings':
			$form = drupal_get_form('congregation_settings_content');
			
			if (isset($form['buttons'])) {
				$block['subject'] = t('Congregation settings');
				$block['content'] = $form;
			}
      break;
	}
	
	return $block;
}

function congregation_settings_content($form, &$form_state) {
	module_load_include('inc', 'congregation', 'congregation.pages');
	$path = current_path();	
	$form = array();
	
	// Add submit button to all appropriate congregation paths.
	switch ($path) {
		case 'setup/congregations/congregation':
			$form['buttons'] = array();
			$form['buttons']['#weight'] = 100;
			$form['buttons']['submit'] = array(
				'#type'   => 'submit',
				'#value'  => t('Save'),
				'#weight' => 25,
				'#submit' => array('congregation_settings_submit'),
			);
			break;
	}
	
	// Add other form elements based on path.
	switch ($path) {
		case 'setup/congregations/congregation':
			$form['congregation_list_limit'] = array(
				'#type'          => 'textfield',
				'#title'         => t('congregation list limit'),
				'#default_value' => variable_get('congregation_list_limit', 25),
				'#size'          => 4,
				'#weight'        => 1,
			);
			break;
	}
	
	return $form;
}

function congregation_settings_submit($form, &$form_state) {
	if (isset($form_state['values']['congregation_list_limit'])) {
		variable_set('congregation_list_limit', $form_state['values']['congregation_list_limit']);
	}
}

function get_congregation_list() {
	$result = db_select('congregation', 'c')
			->fields('c', array('cid', 'congregation_name'))
			->execute();
			
	$array = $result->fetchAllKeyed();
	
	return $array;
}

class CongregationController extends DrupalDefaultEntityController{
	
	public function create($type = '') {
		return (object)array(
			'cid'                => '',
			'congregation_name'  => '',
			'khid'               => NULL,
			'phone'              => '',
			'ptcid'              => NULL,
			'last_trade_date'    => NULL,
			'active'             => '',
			'circuit'            => '',
			'is_new'             => TRUE,
		);
	}
	
	public function save($congregation) {
		$transaction = db_transaction();

		try{
			if (isset($congregation->is_new) && $congregation->is_new) {
				drupal_write_record('congregation', $congregation);
				$op = 'insert';
			}
			else {
				drupal_write_record('congregation', $congregation, 'cid');
				$op = 'update';
			}

			module_invoke_all('entity_' . $op, $congregation, 'congregation');
			$congregation->is_new = FALSE;
			db_ignore_slave();
			return $congregation;
		}
		catch (Exception $e) {
			$transaction->rollback();
			watchdog_exception('congregation', $e, NULL, WATCHDOG_ERROR);
			return FALSE;
		}
	}
	
	public function delete($cids) {
		if (!empty($cids)) {
			$congregation = $this->load($cids, array());
			$congregation = db_transaction();
			
			try{
				db_delete('congregation')
					->condition('cid', $cids, 'IN')
					->execute();

				db_ignore_slave();
			}
			catch (Exception $e) {
				$transaction->rollback();
				watchdog_exception('congregation', $e, NULL, WATCHDOG_ERROR);
				return FALSE;
			}
			module_invoke_all('entity_delete', $congregation, 'congregation');

			cache_clear_all();
			$this->resetCache();
		}
		return TRUE;
	}
}